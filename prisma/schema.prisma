// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model NotebookReplacement {
  id              Int      @id @default(autoincrement())
  oldNotebookId   Int      @unique
  newNotebookId   Int      @unique
  replacementDate DateTime @default(now())
  
  oldNotebook    Notebook @relation("OldNotebook", fields: [oldNotebookId], references: [id])
  newNotebook    Notebook @relation("NewNotebook", fields: [newNotebookId], references: [id])
}

model Notebook {
  id           Int           @id @default(autoincrement())
  serviceTag   String        @unique
  hostname     String?
  brand        String        @default("Dell")
  model        String        @default("5450")
  notebookType NotebookType  @default(NEW)
  ramConfig    RamConfig     @default(GB16)
  status       Status        @default(PENDING_HOMOLOGATION)
  
  // Campos alterados - location -> place
  placeId      Int           @default(1)
  place        Place         @relation(fields: [placeId], references: [id])
  
  // Outros campos permanecem os mesmos
  oldNotebookId Int?         @unique
  oldNotebook  Notebook?     @relation("NotebookReplacement", fields: [oldNotebookId], references: [id])
  newNotebook  Notebook?     @relation("NotebookReplacement")
  responsibleAnalyst Analyst?
  zurichEmployee     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  movements    Movement[]
  oldReplacement NotebookReplacement? @relation("OldNotebook")
  newReplacement NotebookReplacement? @relation("NewNotebook")
}

model Movement {
  id           Int      @id @default(autoincrement())
  notebook     Notebook @relation(fields: [notebookId], references: [id])
  notebookId   Int
  
  // Campos alterados para relacionamentos com Place
  originPlaceId Int
  originPlace   Place   @relation("OriginPlace", fields: [originPlaceId], references: [id])
  
  destinyPlaceId Int
  destinyPlace   Place  @relation("DestinyPlace", fields: [destinyPlaceId], references: [id])
  
  // Outros campos permanecem os mesmos
  previousStatus Status
  newStatus     Status
  analyst      Analyst
  observation  String?
  createdAt    DateTime @default(now())
}

model Place {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  notebooks   Notebook[] // Relação com notebooks neste local
  
  // Campos para rastrear movimentações de origem e destino
  originsMovements  Movement[] @relation("OriginPlace")
  destinyMovements  Movement[] @relation("DestinyPlace")
}

enum Status {
  PENDING_HOMOLOGATION
  HOMOLOGATED
  IN_HOMOLOGATION
  IN_ROLLOUT
  DELIVERED
  RETURNED
  COMPLETED
}

enum Analyst {
  OSVALDO
  DANIEL
  THIAGO
  BRUNO
}

enum NotebookType {
  NEW
  OLD
}

enum RamConfig {
  GB16
  GB32
  OTHER
}